import RPi.GPIO as GPIO
import smbus
from time import sleep
from fastapi import FastAPI  # 导入FastAPI
from fastapi import APIRouter         #接口路由
import uvicorn       # 运行fastapi

app = FastAPI()  # 创建一个app实例           
app01 = APIRouter()

@app01.get("/")  # 编写一个路径操作装饰器



# 设置GPIO引脚
GPIO.setmode(GPIO.BCM)
GPIO.setup(17, GPIO.OUT)

# 读取红外模块温度值
# 这里使用了一个虚拟的函数来获取温度值
# 您需要根据实际情况来获取温度值
class MLX90614():
 
    MLX90614_RAWIR1=0x04
    MLX90614_RAWIR2=0x05
    MLX90614_TA=0x06
    MLX90614_TOBJ1=0x07
    MLX90614_TOBJ2=0x08
 
    MLX90614_TOMAX=0x20
    MLX90614_TOMIN=0x21
    MLX90614_PWMCTRL=0x22
    MLX90614_TARANGE=0x23
    MLX90614_EMISS=0x24
    MLX90614_CONFIG=0x25
    MLX90614_ADDR=0x0E
    MLX90614_ID1=0x3C
    MLX90614_ID2=0x3D
    MLX90614_ID3=0x3E
    MLX90614_ID4=0x3F
 
    comm_retries = 5
    comm_sleep_amount = 0.1

    
    def __init__(self, address=0x5a, bus_num=1):
        self.bus_num = bus_num
        self.address = address
        self.bus = smbus.SMBus(bus=bus_num)
 
    def read_reg(self, reg_addr):
        err = None
        for i in range(self.comm_retries):
            try:
                return self.bus.read_word_data(self.address, reg_addr)
            except IOError as e:
                err = e
                
                sleep(self.comm_sleep_amount)
                
                raise err
    def data_to_temp(self, data):
        temp = (data*0.02) - 273.15
        return temp
 
    def get_amb_temp(self):
        data = self.read_reg(self.MLX90614_TA)
        return self.data_to_temp(data)
 
    def get_obj_temp(self):
        data = self.read_reg(self.MLX90614_TOBJ1)
        return self.data_to_temp(data)


    
    
if __name__ == "__main__":
    sensor = MLX90614()
    print(sensor.get_amb_temp())
    print(sensor.get_obj_temp())
    


temp = sensor.get_amb_temp()

# 将温度值写入到GPIO引脚中
# 这里使用了17号引脚，您可以根据实际情况来选择引脚
GPIO.output(17, int(temp))


if __name__ == '__main__':
    uvicorn.run(app='main_1:app', host="127.24.24.86", port=3080, reload=True, debug=True, workers=1)
    
    # workers=1进程数量

